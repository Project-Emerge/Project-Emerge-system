name: CI Pipeline

on:
  workflow_call:
  workflow_dispatch:

jobs:
  dashboard:
    name: Dashboard (TypeScript/React)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript type checking
      run: npx tsc --noEmit

    - name: Run ESLint
      run: npm run lint

    - name: Build dashboard
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dashboard-dist
        path: dashboard/dist/
        retention-days: 1

  scala-runtime:
    name: Scala Runtime (SBT)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: 'sbt'

    - name: Setup SBT
      uses: sbt/setup-sbt@v1

    - name: Compile Scala code
      run: sbt compile

    - name: Run Scala tests (if any)
      run: sbt test

    - name: Build assembly JAR
      run: sbt assembly

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: scala-assembly
        path: aggregate-runtime/target/scala-*/*-assembly-*.jar
        retention-days: 1

  python-detector:
    name: Python ArUco Detector
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install Python dependencies
      run: uv sync --frozen

    - name: Run Python linting (if available)
      run: |
        if uv run python -c "import ruff" 2>/dev/null; then
          uv run ruff check aruco-detector/
        else
          echo "Ruff not found, skipping linting"
        fi
      continue-on-error: true

    - name: Run Python type checking (if available)
      run: |
        if uv run python -c "import mypy" 2>/dev/null; then
          uv run mypy aruco-detector/
        else
          echo "MyPy not found, skipping type checking"
        fi
      continue-on-error: true

    - name: Run Python tests (if any)
      run: |
        if uv run python -c "import pytest" 2>/dev/null; then
          uv run pytest aruco-detector/ --verbose
        else
          echo "pytest not found, checking if we can import main modules"
          cd aruco-detector && uv run python -c "import main, estimator"
        fi

  docker-builds:
    name: Docker Build Tests
    runs-on: ubuntu-latest
    needs: [dashboard, scala-runtime, python-detector]
    strategy:
      matrix:
        component: [dashboard, aggregate-runtime, aruco-detector]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for ${{ matrix.component }}
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./${{ matrix.component }}/Dockerfile
        push: false
        tags: test-${{ matrix.component }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  success:
    runs-on: ubuntu-latest
    needs: [dashboard, scala-runtime, python-detector, docker-builds]
    if: always()
    
    steps:
    - name: Check CI Status
      run: |
        if [[ "${{ needs.dashboard.result }}" != "success" || \
              "${{ needs.scala-runtime.result }}" != "success" || \
              "${{ needs.python-detector.result }}" != "success" || \
              "${{ needs.docker-builds.result }}" != "success" ]]; then
          echo "One or more CI jobs failed"
          exit 1
        else
          echo "All CI jobs passed successfully"
        fi
